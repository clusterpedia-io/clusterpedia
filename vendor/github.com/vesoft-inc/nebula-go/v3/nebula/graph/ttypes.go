// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package graph

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v3/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = nebula0.GoUnusedProtection__
var GoUnusedProtection__ int;

// Attributes:
//  - Rows
//  - ExecDurationInUs
//  - TotalDurationInUs
//  - OtherStats
type ProfilingStats struct {
  Rows int64 `thrift:"rows,1,required" db:"rows" json:"rows"`
  ExecDurationInUs int64 `thrift:"exec_duration_in_us,2,required" db:"exec_duration_in_us" json:"exec_duration_in_us"`
  TotalDurationInUs int64 `thrift:"total_duration_in_us,3,required" db:"total_duration_in_us" json:"total_duration_in_us"`
  OtherStats map[string][]byte `thrift:"other_stats,4,optional" db:"other_stats" json:"other_stats,omitempty"`
}

func NewProfilingStats() *ProfilingStats {
  return &ProfilingStats{}
}


func (p *ProfilingStats) GetRows() int64 {
  return p.Rows
}

func (p *ProfilingStats) GetExecDurationInUs() int64 {
  return p.ExecDurationInUs
}

func (p *ProfilingStats) GetTotalDurationInUs() int64 {
  return p.TotalDurationInUs
}
var ProfilingStats_OtherStats_DEFAULT map[string][]byte

func (p *ProfilingStats) GetOtherStats() map[string][]byte {
  return p.OtherStats
}
func (p *ProfilingStats) IsSetOtherStats() bool {
  return p != nil && p.OtherStats != nil
}

type ProfilingStatsBuilder struct {
  obj *ProfilingStats
}

func NewProfilingStatsBuilder() *ProfilingStatsBuilder{
  return &ProfilingStatsBuilder{
    obj: NewProfilingStats(),
  }
}

func (p ProfilingStatsBuilder) Emit() *ProfilingStats{
  return &ProfilingStats{
    Rows: p.obj.Rows,
    ExecDurationInUs: p.obj.ExecDurationInUs,
    TotalDurationInUs: p.obj.TotalDurationInUs,
    OtherStats: p.obj.OtherStats,
  }
}

func (p *ProfilingStatsBuilder) Rows(rows int64) *ProfilingStatsBuilder {
  p.obj.Rows = rows
  return p
}

func (p *ProfilingStatsBuilder) ExecDurationInUs(execDurationInUs int64) *ProfilingStatsBuilder {
  p.obj.ExecDurationInUs = execDurationInUs
  return p
}

func (p *ProfilingStatsBuilder) TotalDurationInUs(totalDurationInUs int64) *ProfilingStatsBuilder {
  p.obj.TotalDurationInUs = totalDurationInUs
  return p
}

func (p *ProfilingStatsBuilder) OtherStats(otherStats map[string][]byte) *ProfilingStatsBuilder {
  p.obj.OtherStats = otherStats
  return p
}

func (p *ProfilingStats) SetRows(rows int64) *ProfilingStats {
  p.Rows = rows
  return p
}

func (p *ProfilingStats) SetExecDurationInUs(execDurationInUs int64) *ProfilingStats {
  p.ExecDurationInUs = execDurationInUs
  return p
}

func (p *ProfilingStats) SetTotalDurationInUs(totalDurationInUs int64) *ProfilingStats {
  p.TotalDurationInUs = totalDurationInUs
  return p
}

func (p *ProfilingStats) SetOtherStats(otherStats map[string][]byte) *ProfilingStats {
  p.OtherStats = otherStats
  return p
}

func (p *ProfilingStats) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRows bool = false;
  var issetExecDurationInUs bool = false;
  var issetTotalDurationInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetRows = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetExecDurationInUs = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetTotalDurationInUs = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRows{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Rows is not set"));
  }
  if !issetExecDurationInUs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExecDurationInUs is not set"));
  }
  if !issetTotalDurationInUs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalDurationInUs is not set"));
  }
  return nil
}

func (p *ProfilingStats)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Rows = v
  }
  return nil
}

func (p *ProfilingStats)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.ExecDurationInUs = v
  }
  return nil
}

func (p *ProfilingStats)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.TotalDurationInUs = v
  }
  return nil
}

func (p *ProfilingStats)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.OtherStats =  tMap
  for i := 0; i < size; i ++ {
    var _key1 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key1 = v
    }
    var _val2 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val2 = v
    }
    p.OtherStats[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ProfilingStats) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ProfilingStats"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProfilingStats) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rows: ", p), err) }
  if err := oprot.WriteI64(int64(p.Rows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rows (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rows: ", p), err) }
  return err
}

func (p *ProfilingStats) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("exec_duration_in_us", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:exec_duration_in_us: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecDurationInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exec_duration_in_us (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:exec_duration_in_us: ", p), err) }
  return err
}

func (p *ProfilingStats) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("total_duration_in_us", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_duration_in_us: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalDurationInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_duration_in_us (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_duration_in_us: ", p), err) }
  return err
}

func (p *ProfilingStats) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetOtherStats() {
    if err := oprot.WriteFieldBegin("other_stats", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:other_stats: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.OtherStats)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.OtherStats {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:other_stats: ", p), err) }
  }
  return err
}

func (p *ProfilingStats) String() string {
  if p == nil {
    return "<nil>"
  }

  rowsVal := fmt.Sprintf("%v", p.Rows)
  execDurationInUsVal := fmt.Sprintf("%v", p.ExecDurationInUs)
  totalDurationInUsVal := fmt.Sprintf("%v", p.TotalDurationInUs)
  otherStatsVal := fmt.Sprintf("%v", p.OtherStats)
  return fmt.Sprintf("ProfilingStats({Rows:%s ExecDurationInUs:%s TotalDurationInUs:%s OtherStats:%s})", rowsVal, execDurationInUsVal, totalDurationInUsVal, otherStatsVal)
}

// Attributes:
//  - IsDoBranch
//  - ConditionNodeID
type PlanNodeBranchInfo struct {
  IsDoBranch bool `thrift:"is_do_branch,1,required" db:"is_do_branch" json:"is_do_branch"`
  ConditionNodeID int64 `thrift:"condition_node_id,2,required" db:"condition_node_id" json:"condition_node_id"`
}

func NewPlanNodeBranchInfo() *PlanNodeBranchInfo {
  return &PlanNodeBranchInfo{}
}


func (p *PlanNodeBranchInfo) GetIsDoBranch() bool {
  return p.IsDoBranch
}

func (p *PlanNodeBranchInfo) GetConditionNodeID() int64 {
  return p.ConditionNodeID
}
type PlanNodeBranchInfoBuilder struct {
  obj *PlanNodeBranchInfo
}

func NewPlanNodeBranchInfoBuilder() *PlanNodeBranchInfoBuilder{
  return &PlanNodeBranchInfoBuilder{
    obj: NewPlanNodeBranchInfo(),
  }
}

func (p PlanNodeBranchInfoBuilder) Emit() *PlanNodeBranchInfo{
  return &PlanNodeBranchInfo{
    IsDoBranch: p.obj.IsDoBranch,
    ConditionNodeID: p.obj.ConditionNodeID,
  }
}

func (p *PlanNodeBranchInfoBuilder) IsDoBranch(isDoBranch bool) *PlanNodeBranchInfoBuilder {
  p.obj.IsDoBranch = isDoBranch
  return p
}

func (p *PlanNodeBranchInfoBuilder) ConditionNodeID(conditionNodeID int64) *PlanNodeBranchInfoBuilder {
  p.obj.ConditionNodeID = conditionNodeID
  return p
}

func (p *PlanNodeBranchInfo) SetIsDoBranch(isDoBranch bool) *PlanNodeBranchInfo {
  p.IsDoBranch = isDoBranch
  return p
}

func (p *PlanNodeBranchInfo) SetConditionNodeID(conditionNodeID int64) *PlanNodeBranchInfo {
  p.ConditionNodeID = conditionNodeID
  return p
}

func (p *PlanNodeBranchInfo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIsDoBranch bool = false;
  var issetConditionNodeID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetIsDoBranch = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetConditionNodeID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIsDoBranch{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsDoBranch is not set"));
  }
  if !issetConditionNodeID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ConditionNodeID is not set"));
  }
  return nil
}

func (p *PlanNodeBranchInfo)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.IsDoBranch = v
  }
  return nil
}

func (p *PlanNodeBranchInfo)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.ConditionNodeID = v
  }
  return nil
}

func (p *PlanNodeBranchInfo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PlanNodeBranchInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlanNodeBranchInfo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("is_do_branch", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_do_branch: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsDoBranch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_do_branch (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_do_branch: ", p), err) }
  return err
}

func (p *PlanNodeBranchInfo) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("condition_node_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:condition_node_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ConditionNodeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.condition_node_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:condition_node_id: ", p), err) }
  return err
}

func (p *PlanNodeBranchInfo) String() string {
  if p == nil {
    return "<nil>"
  }

  isDoBranchVal := fmt.Sprintf("%v", p.IsDoBranch)
  conditionNodeIDVal := fmt.Sprintf("%v", p.ConditionNodeID)
  return fmt.Sprintf("PlanNodeBranchInfo({IsDoBranch:%s ConditionNodeID:%s})", isDoBranchVal, conditionNodeIDVal)
}

// Attributes:
//  - Key
//  - Value
type Pair struct {
  Key []byte `thrift:"key,1,required" db:"key" json:"key"`
  Value []byte `thrift:"value,2,required" db:"value" json:"value"`
}

func NewPair() *Pair {
  return &Pair{}
}


func (p *Pair) GetKey() []byte {
  return p.Key
}

func (p *Pair) GetValue() []byte {
  return p.Value
}
type PairBuilder struct {
  obj *Pair
}

func NewPairBuilder() *PairBuilder{
  return &PairBuilder{
    obj: NewPair(),
  }
}

func (p PairBuilder) Emit() *Pair{
  return &Pair{
    Key: p.obj.Key,
    Value: p.obj.Value,
  }
}

func (p *PairBuilder) Key(key []byte) *PairBuilder {
  p.obj.Key = key
  return p
}

func (p *PairBuilder) Value(value []byte) *PairBuilder {
  p.obj.Value = value
  return p
}

func (p *Pair) SetKey(key []byte) *Pair {
  p.Key = key
  return p
}

func (p *Pair) SetValue(value []byte) *Pair {
  p.Value = value
  return p
}

func (p *Pair) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetKey = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetValue = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetValue{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *Pair)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Key = v
  }
  return nil
}

func (p *Pair)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Value = v
  }
  return nil
}

func (p *Pair) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Pair"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pair) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *Pair) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *Pair) String() string {
  if p == nil {
    return "<nil>"
  }

  keyVal := fmt.Sprintf("%v", p.Key)
  valueVal := fmt.Sprintf("%v", p.Value)
  return fmt.Sprintf("Pair({Key:%s Value:%s})", keyVal, valueVal)
}

// Attributes:
//  - Name
//  - Id
//  - OutputVar
//  - Description
//  - Profiles
//  - BranchInfo
//  - Dependencies
type PlanNodeDescription struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  Id int64 `thrift:"id,2,required" db:"id" json:"id"`
  OutputVar []byte `thrift:"output_var,3,required" db:"output_var" json:"output_var"`
  Description []*Pair `thrift:"description,4,optional" db:"description" json:"description,omitempty"`
  Profiles []*ProfilingStats `thrift:"profiles,5,optional" db:"profiles" json:"profiles,omitempty"`
  BranchInfo *PlanNodeBranchInfo `thrift:"branch_info,6,optional" db:"branch_info" json:"branch_info,omitempty"`
  Dependencies []int64 `thrift:"dependencies,7,optional" db:"dependencies" json:"dependencies,omitempty"`
}

func NewPlanNodeDescription() *PlanNodeDescription {
  return &PlanNodeDescription{}
}


func (p *PlanNodeDescription) GetName() []byte {
  return p.Name
}

func (p *PlanNodeDescription) GetId() int64 {
  return p.Id
}

func (p *PlanNodeDescription) GetOutputVar() []byte {
  return p.OutputVar
}
var PlanNodeDescription_Description_DEFAULT []*Pair

func (p *PlanNodeDescription) GetDescription() []*Pair {
  return p.Description
}
var PlanNodeDescription_Profiles_DEFAULT []*ProfilingStats

func (p *PlanNodeDescription) GetProfiles() []*ProfilingStats {
  return p.Profiles
}
var PlanNodeDescription_BranchInfo_DEFAULT *PlanNodeBranchInfo
func (p *PlanNodeDescription) GetBranchInfo() *PlanNodeBranchInfo {
  if !p.IsSetBranchInfo() {
    return PlanNodeDescription_BranchInfo_DEFAULT
  }
return p.BranchInfo
}
var PlanNodeDescription_Dependencies_DEFAULT []int64

func (p *PlanNodeDescription) GetDependencies() []int64 {
  return p.Dependencies
}
func (p *PlanNodeDescription) IsSetDescription() bool {
  return p != nil && p.Description != nil
}

func (p *PlanNodeDescription) IsSetProfiles() bool {
  return p != nil && p.Profiles != nil
}

func (p *PlanNodeDescription) IsSetBranchInfo() bool {
  return p != nil && p.BranchInfo != nil
}

func (p *PlanNodeDescription) IsSetDependencies() bool {
  return p != nil && p.Dependencies != nil
}

type PlanNodeDescriptionBuilder struct {
  obj *PlanNodeDescription
}

func NewPlanNodeDescriptionBuilder() *PlanNodeDescriptionBuilder{
  return &PlanNodeDescriptionBuilder{
    obj: NewPlanNodeDescription(),
  }
}

func (p PlanNodeDescriptionBuilder) Emit() *PlanNodeDescription{
  return &PlanNodeDescription{
    Name: p.obj.Name,
    Id: p.obj.Id,
    OutputVar: p.obj.OutputVar,
    Description: p.obj.Description,
    Profiles: p.obj.Profiles,
    BranchInfo: p.obj.BranchInfo,
    Dependencies: p.obj.Dependencies,
  }
}

func (p *PlanNodeDescriptionBuilder) Name(name []byte) *PlanNodeDescriptionBuilder {
  p.obj.Name = name
  return p
}

func (p *PlanNodeDescriptionBuilder) Id(id int64) *PlanNodeDescriptionBuilder {
  p.obj.Id = id
  return p
}

func (p *PlanNodeDescriptionBuilder) OutputVar(outputVar []byte) *PlanNodeDescriptionBuilder {
  p.obj.OutputVar = outputVar
  return p
}

func (p *PlanNodeDescriptionBuilder) Description(description []*Pair) *PlanNodeDescriptionBuilder {
  p.obj.Description = description
  return p
}

func (p *PlanNodeDescriptionBuilder) Profiles(profiles []*ProfilingStats) *PlanNodeDescriptionBuilder {
  p.obj.Profiles = profiles
  return p
}

func (p *PlanNodeDescriptionBuilder) BranchInfo(branchInfo *PlanNodeBranchInfo) *PlanNodeDescriptionBuilder {
  p.obj.BranchInfo = branchInfo
  return p
}

func (p *PlanNodeDescriptionBuilder) Dependencies(dependencies []int64) *PlanNodeDescriptionBuilder {
  p.obj.Dependencies = dependencies
  return p
}

func (p *PlanNodeDescription) SetName(name []byte) *PlanNodeDescription {
  p.Name = name
  return p
}

func (p *PlanNodeDescription) SetId(id int64) *PlanNodeDescription {
  p.Id = id
  return p
}

func (p *PlanNodeDescription) SetOutputVar(outputVar []byte) *PlanNodeDescription {
  p.OutputVar = outputVar
  return p
}

func (p *PlanNodeDescription) SetDescription(description []*Pair) *PlanNodeDescription {
  p.Description = description
  return p
}

func (p *PlanNodeDescription) SetProfiles(profiles []*ProfilingStats) *PlanNodeDescription {
  p.Profiles = profiles
  return p
}

func (p *PlanNodeDescription) SetBranchInfo(branchInfo *PlanNodeBranchInfo) *PlanNodeDescription {
  p.BranchInfo = branchInfo
  return p
}

func (p *PlanNodeDescription) SetDependencies(dependencies []int64) *PlanNodeDescription {
  p.Dependencies = dependencies
  return p
}

func (p *PlanNodeDescription) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetId bool = false;
  var issetOutputVar bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetId = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetOutputVar = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetId{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Id is not set"));
  }
  if !issetOutputVar{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OutputVar is not set"));
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Id = v
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.OutputVar = v
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Pair, 0, size)
  p.Description =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := NewPair()
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Description = append(p.Description, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ProfilingStats, 0, size)
  p.Profiles =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := NewProfilingStats()
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Profiles = append(p.Profiles, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField6(iprot thrift.Protocol) error {
  p.BranchInfo = NewPlanNodeBranchInfo()
  if err := p.BranchInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BranchInfo), err)
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Dependencies =  tSlice
  for i := 0; i < size; i ++ {
    var _elem5 int64
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem5 = v
    }
    p.Dependencies = append(p.Dependencies, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanNodeDescription) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PlanNodeDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlanNodeDescription) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *PlanNodeDescription) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *PlanNodeDescription) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("output_var", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:output_var: ", p), err) }
  if err := oprot.WriteBinary(p.OutputVar); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.output_var (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:output_var: ", p), err) }
  return err
}

func (p *PlanNodeDescription) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Description)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Description {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetProfiles() {
    if err := oprot.WriteFieldBegin("profiles", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:profiles: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Profiles)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Profiles {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:profiles: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetBranchInfo() {
    if err := oprot.WriteFieldBegin("branch_info", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:branch_info: ", p), err) }
    if err := p.BranchInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BranchInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:branch_info: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetDependencies() {
    if err := oprot.WriteFieldBegin("dependencies", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dependencies: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.Dependencies)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Dependencies {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dependencies: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) String() string {
  if p == nil {
    return "<nil>"
  }

  nameVal := fmt.Sprintf("%v", p.Name)
  idVal := fmt.Sprintf("%v", p.Id)
  outputVarVal := fmt.Sprintf("%v", p.OutputVar)
  descriptionVal := fmt.Sprintf("%v", p.Description)
  profilesVal := fmt.Sprintf("%v", p.Profiles)
  var branchInfoVal string
  if p.BranchInfo == nil {
    branchInfoVal = "<nil>"
  } else {
    branchInfoVal = fmt.Sprintf("%v", p.BranchInfo)
  }
  dependenciesVal := fmt.Sprintf("%v", p.Dependencies)
  return fmt.Sprintf("PlanNodeDescription({Name:%s Id:%s OutputVar:%s Description:%s Profiles:%s BranchInfo:%s Dependencies:%s})", nameVal, idVal, outputVarVal, descriptionVal, profilesVal, branchInfoVal, dependenciesVal)
}

// Attributes:
//  - PlanNodeDescs
//  - NodeIndexMap
//  - Format
//  - OptimizeTimeInUs
type PlanDescription struct {
  PlanNodeDescs []*PlanNodeDescription `thrift:"plan_node_descs,1,required" db:"plan_node_descs" json:"plan_node_descs"`
  NodeIndexMap map[int64]int64 `thrift:"node_index_map,2,required" db:"node_index_map" json:"node_index_map"`
  Format []byte `thrift:"format,3,required" db:"format" json:"format"`
  OptimizeTimeInUs int32 `thrift:"optimize_time_in_us,4,required" db:"optimize_time_in_us" json:"optimize_time_in_us"`
}

func NewPlanDescription() *PlanDescription {
  return &PlanDescription{}
}


func (p *PlanDescription) GetPlanNodeDescs() []*PlanNodeDescription {
  return p.PlanNodeDescs
}

func (p *PlanDescription) GetNodeIndexMap() map[int64]int64 {
  return p.NodeIndexMap
}

func (p *PlanDescription) GetFormat() []byte {
  return p.Format
}

func (p *PlanDescription) GetOptimizeTimeInUs() int32 {
  return p.OptimizeTimeInUs
}
type PlanDescriptionBuilder struct {
  obj *PlanDescription
}

func NewPlanDescriptionBuilder() *PlanDescriptionBuilder{
  return &PlanDescriptionBuilder{
    obj: NewPlanDescription(),
  }
}

func (p PlanDescriptionBuilder) Emit() *PlanDescription{
  return &PlanDescription{
    PlanNodeDescs: p.obj.PlanNodeDescs,
    NodeIndexMap: p.obj.NodeIndexMap,
    Format: p.obj.Format,
    OptimizeTimeInUs: p.obj.OptimizeTimeInUs,
  }
}

func (p *PlanDescriptionBuilder) PlanNodeDescs(planNodeDescs []*PlanNodeDescription) *PlanDescriptionBuilder {
  p.obj.PlanNodeDescs = planNodeDescs
  return p
}

func (p *PlanDescriptionBuilder) NodeIndexMap(nodeIndexMap map[int64]int64) *PlanDescriptionBuilder {
  p.obj.NodeIndexMap = nodeIndexMap
  return p
}

func (p *PlanDescriptionBuilder) Format(format []byte) *PlanDescriptionBuilder {
  p.obj.Format = format
  return p
}

func (p *PlanDescriptionBuilder) OptimizeTimeInUs(optimizeTimeInUs int32) *PlanDescriptionBuilder {
  p.obj.OptimizeTimeInUs = optimizeTimeInUs
  return p
}

func (p *PlanDescription) SetPlanNodeDescs(planNodeDescs []*PlanNodeDescription) *PlanDescription {
  p.PlanNodeDescs = planNodeDescs
  return p
}

func (p *PlanDescription) SetNodeIndexMap(nodeIndexMap map[int64]int64) *PlanDescription {
  p.NodeIndexMap = nodeIndexMap
  return p
}

func (p *PlanDescription) SetFormat(format []byte) *PlanDescription {
  p.Format = format
  return p
}

func (p *PlanDescription) SetOptimizeTimeInUs(optimizeTimeInUs int32) *PlanDescription {
  p.OptimizeTimeInUs = optimizeTimeInUs
  return p
}

func (p *PlanDescription) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPlanNodeDescs bool = false;
  var issetNodeIndexMap bool = false;
  var issetFormat bool = false;
  var issetOptimizeTimeInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetPlanNodeDescs = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNodeIndexMap = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetFormat = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetOptimizeTimeInUs = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPlanNodeDescs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PlanNodeDescs is not set"));
  }
  if !issetNodeIndexMap{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NodeIndexMap is not set"));
  }
  if !issetFormat{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Format is not set"));
  }
  if !issetOptimizeTimeInUs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OptimizeTimeInUs is not set"));
  }
  return nil
}

func (p *PlanDescription)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PlanNodeDescription, 0, size)
  p.PlanNodeDescs =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := NewPlanNodeDescription()
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.PlanNodeDescs = append(p.PlanNodeDescs, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanDescription)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64]int64, size)
  p.NodeIndexMap =  tMap
  for i := 0; i < size; i ++ {
    var _key7 int64
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key7 = v
    }
    var _val8 int64
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val8 = v
    }
    p.NodeIndexMap[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PlanDescription)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Format = v
  }
  return nil
}

func (p *PlanDescription)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.OptimizeTimeInUs = v
  }
  return nil
}

func (p *PlanDescription) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PlanDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlanDescription) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("plan_node_descs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:plan_node_descs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PlanNodeDescs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PlanNodeDescs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:plan_node_descs: ", p), err) }
  return err
}

func (p *PlanDescription) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("node_index_map", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:node_index_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.NodeIndexMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.NodeIndexMap {
    if err := oprot.WriteI64(int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:node_index_map: ", p), err) }
  return err
}

func (p *PlanDescription) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("format", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:format: ", p), err) }
  if err := oprot.WriteBinary(p.Format); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.format (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:format: ", p), err) }
  return err
}

func (p *PlanDescription) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optimize_time_in_us", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:optimize_time_in_us: ", p), err) }
  if err := oprot.WriteI32(int32(p.OptimizeTimeInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.optimize_time_in_us (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:optimize_time_in_us: ", p), err) }
  return err
}

func (p *PlanDescription) String() string {
  if p == nil {
    return "<nil>"
  }

  planNodeDescsVal := fmt.Sprintf("%v", p.PlanNodeDescs)
  nodeIndexMapVal := fmt.Sprintf("%v", p.NodeIndexMap)
  formatVal := fmt.Sprintf("%v", p.Format)
  optimizeTimeInUsVal := fmt.Sprintf("%v", p.OptimizeTimeInUs)
  return fmt.Sprintf("PlanDescription({PlanNodeDescs:%s NodeIndexMap:%s Format:%s OptimizeTimeInUs:%s})", planNodeDescsVal, nodeIndexMapVal, formatVal, optimizeTimeInUsVal)
}

// Attributes:
//  - ErrorCode
//  - LatencyInUs
//  - Data
//  - SpaceName
//  - ErrorMsg
//  - PlanDesc
//  - Comment
type ExecutionResponse struct {
  ErrorCode nebula0.ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  LatencyInUs int64 `thrift:"latency_in_us,2,required" db:"latency_in_us" json:"latency_in_us"`
  Data *nebula0.DataSet `thrift:"data,3,optional" db:"data" json:"data,omitempty"`
  SpaceName []byte `thrift:"space_name,4,optional" db:"space_name" json:"space_name,omitempty"`
  ErrorMsg []byte `thrift:"error_msg,5,optional" db:"error_msg" json:"error_msg,omitempty"`
  PlanDesc *PlanDescription `thrift:"plan_desc,6,optional" db:"plan_desc" json:"plan_desc,omitempty"`
  Comment []byte `thrift:"comment,7,optional" db:"comment" json:"comment,omitempty"`
}

func NewExecutionResponse() *ExecutionResponse {
  return &ExecutionResponse{}
}


func (p *ExecutionResponse) GetErrorCode() nebula0.ErrorCode {
  return p.ErrorCode
}

func (p *ExecutionResponse) GetLatencyInUs() int64 {
  return p.LatencyInUs
}
var ExecutionResponse_Data_DEFAULT *nebula0.DataSet
func (p *ExecutionResponse) GetData() *nebula0.DataSet {
  if !p.IsSetData() {
    return ExecutionResponse_Data_DEFAULT
  }
return p.Data
}
var ExecutionResponse_SpaceName_DEFAULT []byte

func (p *ExecutionResponse) GetSpaceName() []byte {
  return p.SpaceName
}
var ExecutionResponse_ErrorMsg_DEFAULT []byte

func (p *ExecutionResponse) GetErrorMsg() []byte {
  return p.ErrorMsg
}
var ExecutionResponse_PlanDesc_DEFAULT *PlanDescription
func (p *ExecutionResponse) GetPlanDesc() *PlanDescription {
  if !p.IsSetPlanDesc() {
    return ExecutionResponse_PlanDesc_DEFAULT
  }
return p.PlanDesc
}
var ExecutionResponse_Comment_DEFAULT []byte

func (p *ExecutionResponse) GetComment() []byte {
  return p.Comment
}
func (p *ExecutionResponse) IsSetData() bool {
  return p != nil && p.Data != nil
}

func (p *ExecutionResponse) IsSetSpaceName() bool {
  return p != nil && p.SpaceName != nil
}

func (p *ExecutionResponse) IsSetErrorMsg() bool {
  return p != nil && p.ErrorMsg != nil
}

func (p *ExecutionResponse) IsSetPlanDesc() bool {
  return p != nil && p.PlanDesc != nil
}

func (p *ExecutionResponse) IsSetComment() bool {
  return p != nil && p.Comment != nil
}

type ExecutionResponseBuilder struct {
  obj *ExecutionResponse
}

func NewExecutionResponseBuilder() *ExecutionResponseBuilder{
  return &ExecutionResponseBuilder{
    obj: NewExecutionResponse(),
  }
}

func (p ExecutionResponseBuilder) Emit() *ExecutionResponse{
  return &ExecutionResponse{
    ErrorCode: p.obj.ErrorCode,
    LatencyInUs: p.obj.LatencyInUs,
    Data: p.obj.Data,
    SpaceName: p.obj.SpaceName,
    ErrorMsg: p.obj.ErrorMsg,
    PlanDesc: p.obj.PlanDesc,
    Comment: p.obj.Comment,
  }
}

func (e *ExecutionResponseBuilder) ErrorCode(errorCode nebula0.ErrorCode) *ExecutionResponseBuilder {
  e.obj.ErrorCode = errorCode
  return e
}

func (e *ExecutionResponseBuilder) LatencyInUs(latencyInUs int64) *ExecutionResponseBuilder {
  e.obj.LatencyInUs = latencyInUs
  return e
}

func (e *ExecutionResponseBuilder) Data(data *nebula0.DataSet) *ExecutionResponseBuilder {
  e.obj.Data = data
  return e
}

func (e *ExecutionResponseBuilder) SpaceName(spaceName []byte) *ExecutionResponseBuilder {
  e.obj.SpaceName = spaceName
  return e
}

func (e *ExecutionResponseBuilder) ErrorMsg(errorMsg []byte) *ExecutionResponseBuilder {
  e.obj.ErrorMsg = errorMsg
  return e
}

func (e *ExecutionResponseBuilder) PlanDesc(planDesc *PlanDescription) *ExecutionResponseBuilder {
  e.obj.PlanDesc = planDesc
  return e
}

func (e *ExecutionResponseBuilder) Comment(comment []byte) *ExecutionResponseBuilder {
  e.obj.Comment = comment
  return e
}

func (e *ExecutionResponse) SetErrorCode(errorCode nebula0.ErrorCode) *ExecutionResponse {
  e.ErrorCode = errorCode
  return e
}

func (e *ExecutionResponse) SetLatencyInUs(latencyInUs int64) *ExecutionResponse {
  e.LatencyInUs = latencyInUs
  return e
}

func (e *ExecutionResponse) SetData(data *nebula0.DataSet) *ExecutionResponse {
  e.Data = data
  return e
}

func (e *ExecutionResponse) SetSpaceName(spaceName []byte) *ExecutionResponse {
  e.SpaceName = spaceName
  return e
}

func (e *ExecutionResponse) SetErrorMsg(errorMsg []byte) *ExecutionResponse {
  e.ErrorMsg = errorMsg
  return e
}

func (e *ExecutionResponse) SetPlanDesc(planDesc *PlanDescription) *ExecutionResponse {
  e.PlanDesc = planDesc
  return e
}

func (e *ExecutionResponse) SetComment(comment []byte) *ExecutionResponse {
  e.Comment = comment
  return e
}

func (p *ExecutionResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetLatencyInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetErrorCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetLatencyInUs = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetLatencyInUs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LatencyInUs is not set"));
  }
  return nil
}

func (p *ExecutionResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.ErrorCode = temp
  }
  return nil
}

func (p *ExecutionResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.LatencyInUs = v
  }
  return nil
}

func (p *ExecutionResponse)  ReadField3(iprot thrift.Protocol) error {
  p.Data = nebula0.NewDataSet()
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *ExecutionResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.SpaceName = v
  }
  return nil
}

func (p *ExecutionResponse)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.ErrorMsg = v
  }
  return nil
}

func (p *ExecutionResponse)  ReadField6(iprot thrift.Protocol) error {
  p.PlanDesc = NewPlanDescription()
  if err := p.PlanDesc.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PlanDesc), err)
  }
  return nil
}

func (p *ExecutionResponse)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.Comment = v
  }
  return nil
}

func (p *ExecutionResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExecutionResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecutionResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *ExecutionResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("latency_in_us", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latency_in_us: ", p), err) }
  if err := oprot.WriteI64(int64(p.LatencyInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latency_in_us (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latency_in_us: ", p), err) }
  return err
}

func (p *ExecutionResponse) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetSpaceName() {
    if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:space_name: ", p), err) }
    if err := oprot.WriteBinary(p.SpaceName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.space_name (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:space_name: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:error_msg: ", p), err) }
    if err := oprot.WriteBinary(p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:error_msg: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetPlanDesc() {
    if err := oprot.WriteFieldBegin("plan_desc", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:plan_desc: ", p), err) }
    if err := p.PlanDesc.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PlanDesc), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:plan_desc: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin("comment", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:comment: ", p), err) }
    if err := oprot.WriteBinary(p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:comment: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  errorCodeVal := fmt.Sprintf("%v", p.ErrorCode)
  latencyInUsVal := fmt.Sprintf("%v", p.LatencyInUs)
  var dataVal string
  if p.Data == nil {
    dataVal = "<nil>"
  } else {
    dataVal = fmt.Sprintf("%v", p.Data)
  }
  spaceNameVal := fmt.Sprintf("%v", p.SpaceName)
  errorMsgVal := fmt.Sprintf("%v", p.ErrorMsg)
  var planDescVal string
  if p.PlanDesc == nil {
    planDescVal = "<nil>"
  } else {
    planDescVal = fmt.Sprintf("%v", p.PlanDesc)
  }
  commentVal := fmt.Sprintf("%v", p.Comment)
  return fmt.Sprintf("ExecutionResponse({ErrorCode:%s LatencyInUs:%s Data:%s SpaceName:%s ErrorMsg:%s PlanDesc:%s Comment:%s})", errorCodeVal, latencyInUsVal, dataVal, spaceNameVal, errorMsgVal, planDescVal, commentVal)
}

// Attributes:
//  - ErrorCode
//  - ErrorMsg
//  - SessionID
//  - TimeZoneOffsetSeconds
//  - TimeZoneName
type AuthResponse struct {
  ErrorCode nebula0.ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorMsg []byte `thrift:"error_msg,2,optional" db:"error_msg" json:"error_msg,omitempty"`
  SessionID *int64 `thrift:"session_id,3,optional" db:"session_id" json:"session_id,omitempty"`
  TimeZoneOffsetSeconds *int32 `thrift:"time_zone_offset_seconds,4,optional" db:"time_zone_offset_seconds" json:"time_zone_offset_seconds,omitempty"`
  TimeZoneName []byte `thrift:"time_zone_name,5,optional" db:"time_zone_name" json:"time_zone_name,omitempty"`
}

func NewAuthResponse() *AuthResponse {
  return &AuthResponse{}
}


func (p *AuthResponse) GetErrorCode() nebula0.ErrorCode {
  return p.ErrorCode
}
var AuthResponse_ErrorMsg_DEFAULT []byte

func (p *AuthResponse) GetErrorMsg() []byte {
  return p.ErrorMsg
}
var AuthResponse_SessionID_DEFAULT int64
func (p *AuthResponse) GetSessionID() int64 {
  if !p.IsSetSessionID() {
    return AuthResponse_SessionID_DEFAULT
  }
return *p.SessionID
}
var AuthResponse_TimeZoneOffsetSeconds_DEFAULT int32
func (p *AuthResponse) GetTimeZoneOffsetSeconds() int32 {
  if !p.IsSetTimeZoneOffsetSeconds() {
    return AuthResponse_TimeZoneOffsetSeconds_DEFAULT
  }
return *p.TimeZoneOffsetSeconds
}
var AuthResponse_TimeZoneName_DEFAULT []byte

func (p *AuthResponse) GetTimeZoneName() []byte {
  return p.TimeZoneName
}
func (p *AuthResponse) IsSetErrorMsg() bool {
  return p != nil && p.ErrorMsg != nil
}

func (p *AuthResponse) IsSetSessionID() bool {
  return p != nil && p.SessionID != nil
}

func (p *AuthResponse) IsSetTimeZoneOffsetSeconds() bool {
  return p != nil && p.TimeZoneOffsetSeconds != nil
}

func (p *AuthResponse) IsSetTimeZoneName() bool {
  return p != nil && p.TimeZoneName != nil
}

type AuthResponseBuilder struct {
  obj *AuthResponse
}

func NewAuthResponseBuilder() *AuthResponseBuilder{
  return &AuthResponseBuilder{
    obj: NewAuthResponse(),
  }
}

func (p AuthResponseBuilder) Emit() *AuthResponse{
  return &AuthResponse{
    ErrorCode: p.obj.ErrorCode,
    ErrorMsg: p.obj.ErrorMsg,
    SessionID: p.obj.SessionID,
    TimeZoneOffsetSeconds: p.obj.TimeZoneOffsetSeconds,
    TimeZoneName: p.obj.TimeZoneName,
  }
}

func (a *AuthResponseBuilder) ErrorCode(errorCode nebula0.ErrorCode) *AuthResponseBuilder {
  a.obj.ErrorCode = errorCode
  return a
}

func (a *AuthResponseBuilder) ErrorMsg(errorMsg []byte) *AuthResponseBuilder {
  a.obj.ErrorMsg = errorMsg
  return a
}

func (a *AuthResponseBuilder) SessionID(sessionID *int64) *AuthResponseBuilder {
  a.obj.SessionID = sessionID
  return a
}

func (a *AuthResponseBuilder) TimeZoneOffsetSeconds(timeZoneOffsetSeconds *int32) *AuthResponseBuilder {
  a.obj.TimeZoneOffsetSeconds = timeZoneOffsetSeconds
  return a
}

func (a *AuthResponseBuilder) TimeZoneName(timeZoneName []byte) *AuthResponseBuilder {
  a.obj.TimeZoneName = timeZoneName
  return a
}

func (a *AuthResponse) SetErrorCode(errorCode nebula0.ErrorCode) *AuthResponse {
  a.ErrorCode = errorCode
  return a
}

func (a *AuthResponse) SetErrorMsg(errorMsg []byte) *AuthResponse {
  a.ErrorMsg = errorMsg
  return a
}

func (a *AuthResponse) SetSessionID(sessionID *int64) *AuthResponse {
  a.SessionID = sessionID
  return a
}

func (a *AuthResponse) SetTimeZoneOffsetSeconds(timeZoneOffsetSeconds *int32) *AuthResponse {
  a.TimeZoneOffsetSeconds = timeZoneOffsetSeconds
  return a
}

func (a *AuthResponse) SetTimeZoneName(timeZoneName []byte) *AuthResponse {
  a.TimeZoneName = timeZoneName
  return a
}

func (p *AuthResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetErrorCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *AuthResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.ErrorCode = temp
  }
  return nil
}

func (p *AuthResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.ErrorMsg = v
  }
  return nil
}

func (p *AuthResponse)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.SessionID = &v
  }
  return nil
}

func (p *AuthResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.TimeZoneOffsetSeconds = &v
  }
  return nil
}

func (p *AuthResponse)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.TimeZoneName = v
  }
  return nil
}

func (p *AuthResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AuthResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *AuthResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_msg: ", p), err) }
    if err := oprot.WriteBinary(p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_msg: ", p), err) }
  }
  return err
}

func (p *AuthResponse) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetSessionID() {
    if err := oprot.WriteFieldBegin("session_id", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:session_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.SessionID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.session_id (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:session_id: ", p), err) }
  }
  return err
}

func (p *AuthResponse) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetTimeZoneOffsetSeconds() {
    if err := oprot.WriteFieldBegin("time_zone_offset_seconds", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:time_zone_offset_seconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TimeZoneOffsetSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.time_zone_offset_seconds (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:time_zone_offset_seconds: ", p), err) }
  }
  return err
}

func (p *AuthResponse) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetTimeZoneName() {
    if err := oprot.WriteFieldBegin("time_zone_name", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:time_zone_name: ", p), err) }
    if err := oprot.WriteBinary(p.TimeZoneName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.time_zone_name (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:time_zone_name: ", p), err) }
  }
  return err
}

func (p *AuthResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  errorCodeVal := fmt.Sprintf("%v", p.ErrorCode)
  errorMsgVal := fmt.Sprintf("%v", p.ErrorMsg)
  var sessionIDVal string
  if p.SessionID == nil {
    sessionIDVal = "<nil>"
  } else {
    sessionIDVal = fmt.Sprintf("%v", *p.SessionID)
  }
  var timeZoneOffsetSecondsVal string
  if p.TimeZoneOffsetSeconds == nil {
    timeZoneOffsetSecondsVal = "<nil>"
  } else {
    timeZoneOffsetSecondsVal = fmt.Sprintf("%v", *p.TimeZoneOffsetSeconds)
  }
  timeZoneNameVal := fmt.Sprintf("%v", p.TimeZoneName)
  return fmt.Sprintf("AuthResponse({ErrorCode:%s ErrorMsg:%s SessionID:%s TimeZoneOffsetSeconds:%s TimeZoneName:%s})", errorCodeVal, errorMsgVal, sessionIDVal, timeZoneOffsetSecondsVal, timeZoneNameVal)
}

// Attributes:
//  - ErrorCode
//  - ErrorMsg
type VerifyClientVersionResp struct {
  ErrorCode nebula0.ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorMsg []byte `thrift:"error_msg,2,optional" db:"error_msg" json:"error_msg,omitempty"`
}

func NewVerifyClientVersionResp() *VerifyClientVersionResp {
  return &VerifyClientVersionResp{}
}


func (p *VerifyClientVersionResp) GetErrorCode() nebula0.ErrorCode {
  return p.ErrorCode
}
var VerifyClientVersionResp_ErrorMsg_DEFAULT []byte

func (p *VerifyClientVersionResp) GetErrorMsg() []byte {
  return p.ErrorMsg
}
func (p *VerifyClientVersionResp) IsSetErrorMsg() bool {
  return p != nil && p.ErrorMsg != nil
}

type VerifyClientVersionRespBuilder struct {
  obj *VerifyClientVersionResp
}

func NewVerifyClientVersionRespBuilder() *VerifyClientVersionRespBuilder{
  return &VerifyClientVersionRespBuilder{
    obj: NewVerifyClientVersionResp(),
  }
}

func (p VerifyClientVersionRespBuilder) Emit() *VerifyClientVersionResp{
  return &VerifyClientVersionResp{
    ErrorCode: p.obj.ErrorCode,
    ErrorMsg: p.obj.ErrorMsg,
  }
}

func (v *VerifyClientVersionRespBuilder) ErrorCode(errorCode nebula0.ErrorCode) *VerifyClientVersionRespBuilder {
  v.obj.ErrorCode = errorCode
  return v
}

func (v *VerifyClientVersionRespBuilder) ErrorMsg(errorMsg []byte) *VerifyClientVersionRespBuilder {
  v.obj.ErrorMsg = errorMsg
  return v
}

func (v *VerifyClientVersionResp) SetErrorCode(errorCode nebula0.ErrorCode) *VerifyClientVersionResp {
  v.ErrorCode = errorCode
  return v
}

func (v *VerifyClientVersionResp) SetErrorMsg(errorMsg []byte) *VerifyClientVersionResp {
  v.ErrorMsg = errorMsg
  return v
}

func (p *VerifyClientVersionResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetErrorCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *VerifyClientVersionResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.ErrorCode = temp
  }
  return nil
}

func (p *VerifyClientVersionResp)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.ErrorMsg = v
  }
  return nil
}

func (p *VerifyClientVersionResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("VerifyClientVersionResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyClientVersionResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *VerifyClientVersionResp) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_msg: ", p), err) }
    if err := oprot.WriteBinary(p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_msg: ", p), err) }
  }
  return err
}

func (p *VerifyClientVersionResp) String() string {
  if p == nil {
    return "<nil>"
  }

  errorCodeVal := fmt.Sprintf("%v", p.ErrorCode)
  errorMsgVal := fmt.Sprintf("%v", p.ErrorMsg)
  return fmt.Sprintf("VerifyClientVersionResp({ErrorCode:%s ErrorMsg:%s})", errorCodeVal, errorMsgVal)
}

// Attributes:
//  - Version
type VerifyClientVersionReq struct {
  Version []byte `thrift:"version,1,required" db:"version" json:"version"`
}

func NewVerifyClientVersionReq() *VerifyClientVersionReq {
  return &VerifyClientVersionReq{
    Version: []byte("3.0.0"),
  }
}


func (p *VerifyClientVersionReq) GetVersion() []byte {
  return p.Version
}
type VerifyClientVersionReqBuilder struct {
  obj *VerifyClientVersionReq
}

func NewVerifyClientVersionReqBuilder() *VerifyClientVersionReqBuilder{
  return &VerifyClientVersionReqBuilder{
    obj: NewVerifyClientVersionReq(),
  }
}

func (p VerifyClientVersionReqBuilder) Emit() *VerifyClientVersionReq{
  return &VerifyClientVersionReq{
    Version: p.obj.Version,
  }
}

func (v *VerifyClientVersionReqBuilder) Version(version []byte) *VerifyClientVersionReqBuilder {
  v.obj.Version = version
  return v
}

func (v *VerifyClientVersionReq) SetVersion(version []byte) *VerifyClientVersionReq {
  v.Version = version
  return v
}

func (p *VerifyClientVersionReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetVersion = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVersion{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"));
  }
  return nil
}

func (p *VerifyClientVersionReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Version = v
  }
  return nil
}

func (p *VerifyClientVersionReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("VerifyClientVersionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyClientVersionReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteBinary(p.Version); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *VerifyClientVersionReq) String() string {
  if p == nil {
    return "<nil>"
  }

  versionVal := fmt.Sprintf("%v", p.Version)
  return fmt.Sprintf("VerifyClientVersionReq({Version:%s})", versionVal)
}

