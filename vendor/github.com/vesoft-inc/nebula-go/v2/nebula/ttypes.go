// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package nebula

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var GoUnusedProtection__ int;

type NullType int64
const (
  NullType___NULL__ NullType = 0
  NullType_NaN NullType = 1
  NullType_BAD_DATA NullType = 2
  NullType_BAD_TYPE NullType = 3
  NullType_ERR_OVERFLOW NullType = 4
  NullType_UNKNOWN_PROP NullType = 5
  NullType_DIV_BY_ZERO NullType = 6
  NullType_OUT_OF_RANGE NullType = 7
)

var NullTypeToName = map[NullType]string {
  NullType___NULL__: "__NULL__",
  NullType_NaN: "NaN",
  NullType_BAD_DATA: "BAD_DATA",
  NullType_BAD_TYPE: "BAD_TYPE",
  NullType_ERR_OVERFLOW: "ERR_OVERFLOW",
  NullType_UNKNOWN_PROP: "UNKNOWN_PROP",
  NullType_DIV_BY_ZERO: "DIV_BY_ZERO",
  NullType_OUT_OF_RANGE: "OUT_OF_RANGE",
}

var NullTypeToValue = map[string]NullType {
  "__NULL__": NullType___NULL__,
  "NaN": NullType_NaN,
  "BAD_DATA": NullType_BAD_DATA,
  "BAD_TYPE": NullType_BAD_TYPE,
  "ERR_OVERFLOW": NullType_ERR_OVERFLOW,
  "UNKNOWN_PROP": NullType_UNKNOWN_PROP,
  "DIV_BY_ZERO": NullType_DIV_BY_ZERO,
  "OUT_OF_RANGE": NullType_OUT_OF_RANGE,
}

func (p NullType) String() string {
  if v, ok := NullTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func NullTypeFromString(s string) (NullType, error) {
  if v, ok := NullTypeToValue[s]; ok {
    return v, nil
  }
  return NullType(0), fmt.Errorf("not a valid NullType string")
}

func NullTypePtr(v NullType) *NullType { return &v }

type GraphSpaceID int32

func GraphSpaceIDPtr(v GraphSpaceID) *GraphSpaceID { return &v }

type PartitionID int32

func PartitionIDPtr(v PartitionID) *PartitionID { return &v }

type TagID int32

func TagIDPtr(v TagID) *TagID { return &v }

type EdgeType int32

func EdgeTypePtr(v EdgeType) *EdgeType { return &v }

type EdgeRanking int64

func EdgeRankingPtr(v EdgeRanking) *EdgeRanking { return &v }

type LogID int64

func LogIDPtr(v LogID) *LogID { return &v }

type TermID int64

func TermIDPtr(v TermID) *TermID { return &v }

type Timestamp int64

func TimestampPtr(v Timestamp) *Timestamp { return &v }

type IndexID int32

func IndexIDPtr(v IndexID) *IndexID { return &v }

type Port int32

func PortPtr(v Port) *Port { return &v }

type SessionID int64

func SessionIDPtr(v SessionID) *SessionID { return &v }

// Attributes:
//  - Year
//  - Month
//  - Day
type Date struct {
  Year int16 `thrift:"year,1" db:"year" json:"year"`
  Month int8 `thrift:"month,2" db:"month" json:"month"`
  Day int8 `thrift:"day,3" db:"day" json:"day"`
}

func NewDate() *Date {
  return &Date{}
}


func (p *Date) GetYear() int16 {
  return p.Year
}

func (p *Date) GetMonth() int8 {
  return p.Month
}

func (p *Date) GetDay() int8 {
  return p.Day
}
func (p *Date) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Date)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Year = v
}
  return nil
}

func (p *Date)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.Month = temp
}
  return nil
}

func (p *Date)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.Day = temp
}
  return nil
}

func (p *Date) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Date"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Date) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("year", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:year: ", p), err) }
  if err := oprot.WriteI16(int16(p.Year)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.year (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:year: ", p), err) }
  return err
}

func (p *Date) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("month", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:month: ", p), err) }
  if err := oprot.WriteByte(byte(p.Month)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.month (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:month: ", p), err) }
  return err
}

func (p *Date) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("day", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:day: ", p), err) }
  if err := oprot.WriteByte(byte(p.Day)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.day (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:day: ", p), err) }
  return err
}

func (p *Date) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Date(%+v)", *p)
}

// Attributes:
//  - Hour
//  - Minute
//  - Sec
//  - Microsec
type Time struct {
  Hour int8 `thrift:"hour,1" db:"hour" json:"hour"`
  Minute int8 `thrift:"minute,2" db:"minute" json:"minute"`
  Sec int8 `thrift:"sec,3" db:"sec" json:"sec"`
  Microsec int32 `thrift:"microsec,4" db:"microsec" json:"microsec"`
}

func NewTime() *Time {
  return &Time{}
}


func (p *Time) GetHour() int8 {
  return p.Hour
}

func (p *Time) GetMinute() int8 {
  return p.Minute
}

func (p *Time) GetSec() int8 {
  return p.Sec
}

func (p *Time) GetMicrosec() int32 {
  return p.Microsec
}
func (p *Time) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Time)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := int8(v)
  p.Hour = temp
}
  return nil
}

func (p *Time)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.Minute = temp
}
  return nil
}

func (p *Time)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.Sec = temp
}
  return nil
}

func (p *Time)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Microsec = v
}
  return nil
}

func (p *Time) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Time"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Time) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hour", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hour: ", p), err) }
  if err := oprot.WriteByte(byte(p.Hour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hour (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hour: ", p), err) }
  return err
}

func (p *Time) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("minute", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:minute: ", p), err) }
  if err := oprot.WriteByte(byte(p.Minute)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minute (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:minute: ", p), err) }
  return err
}

func (p *Time) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("sec", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sec: ", p), err) }
  if err := oprot.WriteByte(byte(p.Sec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sec (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sec: ", p), err) }
  return err
}

func (p *Time) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("microsec", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:microsec: ", p), err) }
  if err := oprot.WriteI32(int32(p.Microsec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.microsec (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:microsec: ", p), err) }
  return err
}

func (p *Time) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Time(%+v)", *p)
}

// Attributes:
//  - Year
//  - Month
//  - Day
//  - Hour
//  - Minute
//  - Sec
//  - Microsec
type DateTime struct {
  Year int16 `thrift:"year,1" db:"year" json:"year"`
  Month int8 `thrift:"month,2" db:"month" json:"month"`
  Day int8 `thrift:"day,3" db:"day" json:"day"`
  Hour int8 `thrift:"hour,4" db:"hour" json:"hour"`
  Minute int8 `thrift:"minute,5" db:"minute" json:"minute"`
  Sec int8 `thrift:"sec,6" db:"sec" json:"sec"`
  Microsec int32 `thrift:"microsec,7" db:"microsec" json:"microsec"`
}

func NewDateTime() *DateTime {
  return &DateTime{}
}


func (p *DateTime) GetYear() int16 {
  return p.Year
}

func (p *DateTime) GetMonth() int8 {
  return p.Month
}

func (p *DateTime) GetDay() int8 {
  return p.Day
}

func (p *DateTime) GetHour() int8 {
  return p.Hour
}

func (p *DateTime) GetMinute() int8 {
  return p.Minute
}

func (p *DateTime) GetSec() int8 {
  return p.Sec
}

func (p *DateTime) GetMicrosec() int32 {
  return p.Microsec
}
func (p *DateTime) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DateTime)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Year = v
}
  return nil
}

func (p *DateTime)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.Month = temp
}
  return nil
}

func (p *DateTime)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.Day = temp
}
  return nil
}

func (p *DateTime)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.Hour = temp
}
  return nil
}

func (p *DateTime)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.Minute = temp
}
  return nil
}

func (p *DateTime)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := int8(v)
  p.Sec = temp
}
  return nil
}

func (p *DateTime)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Microsec = v
}
  return nil
}

func (p *DateTime) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DateTime"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DateTime) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("year", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:year: ", p), err) }
  if err := oprot.WriteI16(int16(p.Year)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.year (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:year: ", p), err) }
  return err
}

func (p *DateTime) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("month", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:month: ", p), err) }
  if err := oprot.WriteByte(byte(p.Month)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.month (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:month: ", p), err) }
  return err
}

func (p *DateTime) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("day", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:day: ", p), err) }
  if err := oprot.WriteByte(byte(p.Day)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.day (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:day: ", p), err) }
  return err
}

func (p *DateTime) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hour", thrift.BYTE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hour: ", p), err) }
  if err := oprot.WriteByte(byte(p.Hour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hour (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hour: ", p), err) }
  return err
}

func (p *DateTime) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("minute", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:minute: ", p), err) }
  if err := oprot.WriteByte(byte(p.Minute)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minute (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:minute: ", p), err) }
  return err
}

func (p *DateTime) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("sec", thrift.BYTE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sec: ", p), err) }
  if err := oprot.WriteByte(byte(p.Sec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sec (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sec: ", p), err) }
  return err
}

func (p *DateTime) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("microsec", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:microsec: ", p), err) }
  if err := oprot.WriteI32(int32(p.Microsec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.microsec (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:microsec: ", p), err) }
  return err
}

func (p *DateTime) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DateTime(%+v)", *p)
}

// Attributes:
//  - NVal
//  - BVal
//  - IVal
//  - FVal
//  - SVal
//  - DVal
//  - TVal
//  - DtVal
//  - VVal
//  - EVal
//  - PVal
//  - LVal
//  - MVal
//  - UVal
//  - GVal
type Value struct {
  NVal *NullType `thrift:"nVal,1" db:"nVal" json:"nVal,omitempty"`
  BVal *bool `thrift:"bVal,2" db:"bVal" json:"bVal,omitempty"`
  IVal *int64 `thrift:"iVal,3" db:"iVal" json:"iVal,omitempty"`
  FVal *float64 `thrift:"fVal,4" db:"fVal" json:"fVal,omitempty"`
  SVal []byte `thrift:"sVal,5" db:"sVal" json:"sVal,omitempty"`
  DVal *Date `thrift:"dVal,6" db:"dVal" json:"dVal,omitempty"`
  TVal *Time `thrift:"tVal,7" db:"tVal" json:"tVal,omitempty"`
  DtVal *DateTime `thrift:"dtVal,8" db:"dtVal" json:"dtVal,omitempty"`
  VVal *Vertex `thrift:"vVal,9" db:"vVal" json:"vVal,omitempty"`
  EVal *Edge `thrift:"eVal,10" db:"eVal" json:"eVal,omitempty"`
  PVal *Path `thrift:"pVal,11" db:"pVal" json:"pVal,omitempty"`
  LVal *NList `thrift:"lVal,12" db:"lVal" json:"lVal,omitempty"`
  MVal *NMap `thrift:"mVal,13" db:"mVal" json:"mVal,omitempty"`
  UVal *NSet `thrift:"uVal,14" db:"uVal" json:"uVal,omitempty"`
  GVal *DataSet `thrift:"gVal,15" db:"gVal" json:"gVal,omitempty"`
}

func NewValue() *Value {
  return &Value{}
}

var Value_NVal_DEFAULT NullType
func (p *Value) GetNVal() NullType {
  if !p.IsSetNVal() {
    return Value_NVal_DEFAULT
  }
return *p.NVal
}
var Value_BVal_DEFAULT bool
func (p *Value) GetBVal() bool {
  if !p.IsSetBVal() {
    return Value_BVal_DEFAULT
  }
return *p.BVal
}
var Value_IVal_DEFAULT int64
func (p *Value) GetIVal() int64 {
  if !p.IsSetIVal() {
    return Value_IVal_DEFAULT
  }
return *p.IVal
}
var Value_FVal_DEFAULT float64
func (p *Value) GetFVal() float64 {
  if !p.IsSetFVal() {
    return Value_FVal_DEFAULT
  }
return *p.FVal
}
var Value_SVal_DEFAULT []byte

func (p *Value) GetSVal() []byte {
  return p.SVal
}
var Value_DVal_DEFAULT *Date
func (p *Value) GetDVal() *Date {
  if !p.IsSetDVal() {
    return Value_DVal_DEFAULT
  }
return p.DVal
}
var Value_TVal_DEFAULT *Time
func (p *Value) GetTVal() *Time {
  if !p.IsSetTVal() {
    return Value_TVal_DEFAULT
  }
return p.TVal
}
var Value_DtVal_DEFAULT *DateTime
func (p *Value) GetDtVal() *DateTime {
  if !p.IsSetDtVal() {
    return Value_DtVal_DEFAULT
  }
return p.DtVal
}
var Value_VVal_DEFAULT *Vertex
func (p *Value) GetVVal() *Vertex {
  if !p.IsSetVVal() {
    return Value_VVal_DEFAULT
  }
return p.VVal
}
var Value_EVal_DEFAULT *Edge
func (p *Value) GetEVal() *Edge {
  if !p.IsSetEVal() {
    return Value_EVal_DEFAULT
  }
return p.EVal
}
var Value_PVal_DEFAULT *Path
func (p *Value) GetPVal() *Path {
  if !p.IsSetPVal() {
    return Value_PVal_DEFAULT
  }
return p.PVal
}
var Value_LVal_DEFAULT *NList
func (p *Value) GetLVal() *NList {
  if !p.IsSetLVal() {
    return Value_LVal_DEFAULT
  }
return p.LVal
}
var Value_MVal_DEFAULT *NMap
func (p *Value) GetMVal() *NMap {
  if !p.IsSetMVal() {
    return Value_MVal_DEFAULT
  }
return p.MVal
}
var Value_UVal_DEFAULT *NSet
func (p *Value) GetUVal() *NSet {
  if !p.IsSetUVal() {
    return Value_UVal_DEFAULT
  }
return p.UVal
}
var Value_GVal_DEFAULT *DataSet
func (p *Value) GetGVal() *DataSet {
  if !p.IsSetGVal() {
    return Value_GVal_DEFAULT
  }
return p.GVal
}
func (p *Value) CountSetFieldsValue() int {
  count := 0
  if (p.IsSetNVal()) {
    count++
  }
  if (p.IsSetBVal()) {
    count++
  }
  if (p.IsSetIVal()) {
    count++
  }
  if (p.IsSetFVal()) {
    count++
  }
  if (p.IsSetDVal()) {
    count++
  }
  if (p.IsSetTVal()) {
    count++
  }
  if (p.IsSetDtVal()) {
    count++
  }
  if (p.IsSetVVal()) {
    count++
  }
  if (p.IsSetEVal()) {
    count++
  }
  if (p.IsSetPVal()) {
    count++
  }
  if (p.IsSetLVal()) {
    count++
  }
  if (p.IsSetMVal()) {
    count++
  }
  if (p.IsSetUVal()) {
    count++
  }
  if (p.IsSetGVal()) {
    count++
  }
  return count

}

func (p *Value) IsSetNVal() bool {
  return p.NVal != nil
}

func (p *Value) IsSetBVal() bool {
  return p.BVal != nil
}

func (p *Value) IsSetIVal() bool {
  return p.IVal != nil
}

func (p *Value) IsSetFVal() bool {
  return p.FVal != nil
}

func (p *Value) IsSetSVal() bool {
  return p.SVal != nil
}

func (p *Value) IsSetDVal() bool {
  return p.DVal != nil
}

func (p *Value) IsSetTVal() bool {
  return p.TVal != nil
}

func (p *Value) IsSetDtVal() bool {
  return p.DtVal != nil
}

func (p *Value) IsSetVVal() bool {
  return p.VVal != nil
}

func (p *Value) IsSetEVal() bool {
  return p.EVal != nil
}

func (p *Value) IsSetPVal() bool {
  return p.PVal != nil
}

func (p *Value) IsSetLVal() bool {
  return p.LVal != nil
}

func (p *Value) IsSetMVal() bool {
  return p.MVal != nil
}

func (p *Value) IsSetUVal() bool {
  return p.UVal != nil
}

func (p *Value) IsSetGVal() bool {
  return p.GVal != nil
}

func (p *Value) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Value)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := NullType(v)
  p.NVal = &temp
}
  return nil
}

func (p *Value)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BVal = &v
}
  return nil
}

func (p *Value)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IVal = &v
}
  return nil
}

func (p *Value)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FVal = &v
}
  return nil
}

func (p *Value)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SVal = v
}
  return nil
}

func (p *Value)  ReadField6(iprot thrift.Protocol) error {
  p.DVal = NewDate()
  if err := p.DVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DVal), err)
  }
  return nil
}

func (p *Value)  ReadField7(iprot thrift.Protocol) error {
  p.TVal = NewTime()
  if err := p.TVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TVal), err)
  }
  return nil
}

func (p *Value)  ReadField8(iprot thrift.Protocol) error {
  p.DtVal = NewDateTime()
  if err := p.DtVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DtVal), err)
  }
  return nil
}

func (p *Value)  ReadField9(iprot thrift.Protocol) error {
  p.VVal = NewVertex()
  if err := p.VVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VVal), err)
  }
  return nil
}

func (p *Value)  ReadField10(iprot thrift.Protocol) error {
  p.EVal = NewEdge()
  if err := p.EVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EVal), err)
  }
  return nil
}

func (p *Value)  ReadField11(iprot thrift.Protocol) error {
  p.PVal = NewPath()
  if err := p.PVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PVal), err)
  }
  return nil
}

func (p *Value)  ReadField12(iprot thrift.Protocol) error {
  p.LVal = NewNList()
  if err := p.LVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LVal), err)
  }
  return nil
}

func (p *Value)  ReadField13(iprot thrift.Protocol) error {
  p.MVal = NewNMap()
  if err := p.MVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MVal), err)
  }
  return nil
}

func (p *Value)  ReadField14(iprot thrift.Protocol) error {
  p.UVal = NewNSet()
  if err := p.UVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UVal), err)
  }
  return nil
}

func (p *Value)  ReadField15(iprot thrift.Protocol) error {
  p.GVal = NewDataSet()
  if err := p.GVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GVal), err)
  }
  return nil
}

func (p *Value) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsValue(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("Value"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := p.writeField14(oprot); err != nil { return err }
  if err := p.writeField15(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Value) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetNVal() {
    if err := oprot.WriteFieldBegin("nVal", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nVal: ", p), err) }
    if err := oprot.WriteI32(int32(*p.NVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nVal (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetBVal() {
    if err := oprot.WriteFieldBegin("bVal", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bVal: ", p), err) }
    if err := oprot.WriteBool(bool(*p.BVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bVal (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetIVal() {
    if err := oprot.WriteFieldBegin("iVal", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:iVal: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.iVal (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:iVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetFVal() {
    if err := oprot.WriteFieldBegin("fVal", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fVal: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.FVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fVal (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetSVal() {
    if err := oprot.WriteFieldBegin("sVal", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sVal: ", p), err) }
    if err := oprot.WriteBinary(p.SVal); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sVal (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetDVal() {
    if err := oprot.WriteFieldBegin("dVal", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dVal: ", p), err) }
    if err := p.DVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetTVal() {
    if err := oprot.WriteFieldBegin("tVal", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tVal: ", p), err) }
    if err := p.TVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField8(oprot thrift.Protocol) (err error) {
  if p.IsSetDtVal() {
    if err := oprot.WriteFieldBegin("dtVal", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:dtVal: ", p), err) }
    if err := p.DtVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DtVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:dtVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField9(oprot thrift.Protocol) (err error) {
  if p.IsSetVVal() {
    if err := oprot.WriteFieldBegin("vVal", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vVal: ", p), err) }
    if err := p.VVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField10(oprot thrift.Protocol) (err error) {
  if p.IsSetEVal() {
    if err := oprot.WriteFieldBegin("eVal", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:eVal: ", p), err) }
    if err := p.EVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:eVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField11(oprot thrift.Protocol) (err error) {
  if p.IsSetPVal() {
    if err := oprot.WriteFieldBegin("pVal", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:pVal: ", p), err) }
    if err := p.PVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:pVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField12(oprot thrift.Protocol) (err error) {
  if p.IsSetLVal() {
    if err := oprot.WriteFieldBegin("lVal", thrift.STRUCT, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:lVal: ", p), err) }
    if err := p.LVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:lVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField13(oprot thrift.Protocol) (err error) {
  if p.IsSetMVal() {
    if err := oprot.WriteFieldBegin("mVal", thrift.STRUCT, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:mVal: ", p), err) }
    if err := p.MVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:mVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField14(oprot thrift.Protocol) (err error) {
  if p.IsSetUVal() {
    if err := oprot.WriteFieldBegin("uVal", thrift.STRUCT, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:uVal: ", p), err) }
    if err := p.UVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:uVal: ", p), err) }
  }
  return err
}

func (p *Value) writeField15(oprot thrift.Protocol) (err error) {
  if p.IsSetGVal() {
    if err := oprot.WriteFieldBegin("gVal", thrift.STRUCT, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:gVal: ", p), err) }
    if err := p.GVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:gVal: ", p), err) }
  }
  return err
}

func (p *Value) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Value(%+v)", *p)
}

// Attributes:
//  - Values
type NList struct {
  Values []*Value `thrift:"values,1" db:"values" json:"values"`
}

func NewNList() *NList {
  return &NList{}
}


func (p *NList) GetValues() []*Value {
  return p.Values
}
func (p *NList) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NList)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Value, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := NewValue()
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Values = append(p.Values, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NList) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("NList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NList) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err) }
  return err
}

func (p *NList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NList(%+v)", *p)
}

// Attributes:
//  - Kvs
type NMap struct {
  Kvs map[string]*Value `thrift:"kvs,1" db:"kvs" json:"kvs"`
}

func NewNMap() *NMap {
  return &NMap{}
}


func (p *NMap) GetKvs() map[string]*Value {
  return p.Kvs
}
func (p *NMap) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NMap)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Value, size)
  p.Kvs =  tMap
  for i := 0; i < size; i ++ {
var _key1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
    _val2 := NewValue()
    if err := _val2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val2), err)
    }
    p.Kvs[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *NMap) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("NMap"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NMap) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("kvs", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kvs: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Kvs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Kvs {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kvs: ", p), err) }
  return err
}

func (p *NMap) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NMap(%+v)", *p)
}

// Attributes:
//  - Values
type NSet struct {
  Values []*Value `thrift:"values,1" db:"values" json:"values"`
}

func NewNSet() *NSet {
  return &NSet{}
}


func (p *NSet) GetValues() []*Value {
  return p.Values
}
func (p *NSet) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NSet)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]*Value, 0, size)
  p.Values =  tSet
  for i := 0; i < size; i ++ {
    _elem3 := NewValue()
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Values = append(p.Values, _elem3)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *NSet) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("NSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NSet) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Values)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[*Value]bool, len(p.Values))
  for _, v := range p.Values {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Values {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err) }
  return err
}

func (p *NSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NSet(%+v)", *p)
}

// Attributes:
//  - Values
type Row struct {
  Values []*Value `thrift:"values,1" db:"values" json:"values"`
}

func NewRow() *Row {
  return &Row{}
}


func (p *Row) GetValues() []*Value {
  return p.Values
}
func (p *Row) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Row)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Value, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := NewValue()
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Values = append(p.Values, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Row) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Row"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Row) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err) }
  return err
}

func (p *Row) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Row(%+v)", *p)
}

// Attributes:
//  - ColumnNames
//  - Rows
type DataSet struct {
  ColumnNames [][]byte `thrift:"column_names,1" db:"column_names" json:"column_names"`
  Rows []*Row `thrift:"rows,2" db:"rows" json:"rows"`
}

func NewDataSet() *DataSet {
  return &DataSet{}
}


func (p *DataSet) GetColumnNames() [][]byte {
  return p.ColumnNames
}

func (p *DataSet) GetRows() []*Row {
  return p.Rows
}
func (p *DataSet) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataSet)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ColumnNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.ColumnNames = append(p.ColumnNames, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DataSet)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Row, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := NewRow()
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Rows = append(p.Rows, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DataSet) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DataSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataSet) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("column_names", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:column_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnNames {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:column_names: ", p), err) }
  return err
}

func (p *DataSet) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows: ", p), err) }
  return err
}

func (p *DataSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataSet(%+v)", *p)
}

// Attributes:
//  - Name
//  - Props
type Tag struct {
  Name []byte `thrift:"name,1" db:"name" json:"name"`
  Props map[string]*Value `thrift:"props,2" db:"props" json:"props"`
}

func NewTag() *Tag {
  return &Tag{}
}


func (p *Tag) GetName() []byte {
  return p.Name
}

func (p *Tag) GetProps() map[string]*Value {
  return p.Props
}
func (p *Tag) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Tag)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Tag)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Value, size)
  p.Props =  tMap
  for i := 0; i < size; i ++ {
var _key7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key7 = v
}
    _val8 := NewValue()
    if err := _val8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val8), err)
    }
    p.Props[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Tag) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Tag"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Tag) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Tag) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Props)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Props {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *Tag) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Tag(%+v)", *p)
}

// Attributes:
//  - Vid
//  - Tags
type Vertex struct {
  Vid *Value `thrift:"vid,1" db:"vid" json:"vid"`
  Tags []*Tag `thrift:"tags,2" db:"tags" json:"tags"`
}

func NewVertex() *Vertex {
  return &Vertex{}
}

var Vertex_Vid_DEFAULT *Value
func (p *Vertex) GetVid() *Value {
  if !p.IsSetVid() {
    return Vertex_Vid_DEFAULT
  }
return p.Vid
}

func (p *Vertex) GetTags() []*Tag {
  return p.Tags
}
func (p *Vertex) IsSetVid() bool {
  return p.Vid != nil
}

func (p *Vertex) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Vertex)  ReadField1(iprot thrift.Protocol) error {
  p.Vid = NewValue()
  if err := p.Vid.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Vid), err)
  }
  return nil
}

func (p *Vertex)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Tag, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := NewTag()
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.Tags = append(p.Tags, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Vertex) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Vertex"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Vertex) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vid: ", p), err) }
  if err := p.Vid.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Vid), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vid: ", p), err) }
  return err
}

func (p *Vertex) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tags", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tags: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tags: ", p), err) }
  return err
}

func (p *Vertex) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Vertex(%+v)", *p)
}

// Attributes:
//  - Src
//  - Dst
//  - Type
//  - Name
//  - Ranking
//  - Props
type Edge struct {
  Src *Value `thrift:"src,1" db:"src" json:"src"`
  Dst *Value `thrift:"dst,2" db:"dst" json:"dst"`
  Type EdgeType `thrift:"type,3" db:"type" json:"type"`
  Name []byte `thrift:"name,4" db:"name" json:"name"`
  Ranking EdgeRanking `thrift:"ranking,5" db:"ranking" json:"ranking"`
  Props map[string]*Value `thrift:"props,6" db:"props" json:"props"`
}

func NewEdge() *Edge {
  return &Edge{}
}

var Edge_Src_DEFAULT *Value
func (p *Edge) GetSrc() *Value {
  if !p.IsSetSrc() {
    return Edge_Src_DEFAULT
  }
return p.Src
}
var Edge_Dst_DEFAULT *Value
func (p *Edge) GetDst() *Value {
  if !p.IsSetDst() {
    return Edge_Dst_DEFAULT
  }
return p.Dst
}

func (p *Edge) GetType() EdgeType {
  return p.Type
}

func (p *Edge) GetName() []byte {
  return p.Name
}

func (p *Edge) GetRanking() EdgeRanking {
  return p.Ranking
}

func (p *Edge) GetProps() map[string]*Value {
  return p.Props
}
func (p *Edge) IsSetSrc() bool {
  return p.Src != nil
}

func (p *Edge) IsSetDst() bool {
  return p.Dst != nil
}

func (p *Edge) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Edge)  ReadField1(iprot thrift.Protocol) error {
  p.Src = NewValue()
  if err := p.Src.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *Edge)  ReadField2(iprot thrift.Protocol) error {
  p.Dst = NewValue()
  if err := p.Dst.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dst), err)
  }
  return nil
}

func (p *Edge)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := EdgeType(v)
  p.Type = temp
}
  return nil
}

func (p *Edge)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Edge)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := EdgeRanking(v)
  p.Ranking = temp
}
  return nil
}

func (p *Edge)  ReadField6(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Value, size)
  p.Props =  tMap
  for i := 0; i < size; i ++ {
var _key10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key10 = v
}
    _val11 := NewValue()
    if err := _val11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val11), err)
    }
    p.Props[_key10] = _val11
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Edge) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Edge"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Edge) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("src", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := p.Src.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *Edge) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("dst", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dst: ", p), err) }
  if err := p.Dst.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dst), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dst: ", p), err) }
  return err
}

func (p *Edge) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *Edge) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err) }
  return err
}

func (p *Edge) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ranking", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ranking: ", p), err) }
  if err := oprot.WriteI64(int64(p.Ranking)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ranking (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ranking: ", p), err) }
  return err
}

func (p *Edge) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:props: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Props)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Props {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:props: ", p), err) }
  return err
}

func (p *Edge) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Edge(%+v)", *p)
}

// Attributes:
//  - Dst
//  - Type
//  - Name
//  - Ranking
//  - Props
type Step struct {
  Dst *Vertex `thrift:"dst,1" db:"dst" json:"dst"`
  Type EdgeType `thrift:"type,2" db:"type" json:"type"`
  Name []byte `thrift:"name,3" db:"name" json:"name"`
  Ranking EdgeRanking `thrift:"ranking,4" db:"ranking" json:"ranking"`
  Props map[string]*Value `thrift:"props,5" db:"props" json:"props"`
}

func NewStep() *Step {
  return &Step{}
}

var Step_Dst_DEFAULT *Vertex
func (p *Step) GetDst() *Vertex {
  if !p.IsSetDst() {
    return Step_Dst_DEFAULT
  }
return p.Dst
}

func (p *Step) GetType() EdgeType {
  return p.Type
}

func (p *Step) GetName() []byte {
  return p.Name
}

func (p *Step) GetRanking() EdgeRanking {
  return p.Ranking
}

func (p *Step) GetProps() map[string]*Value {
  return p.Props
}
func (p *Step) IsSetDst() bool {
  return p.Dst != nil
}

func (p *Step) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Step)  ReadField1(iprot thrift.Protocol) error {
  p.Dst = NewVertex()
  if err := p.Dst.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dst), err)
  }
  return nil
}

func (p *Step)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := EdgeType(v)
  p.Type = temp
}
  return nil
}

func (p *Step)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Step)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := EdgeRanking(v)
  p.Ranking = temp
}
  return nil
}

func (p *Step)  ReadField5(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Value, size)
  p.Props =  tMap
  for i := 0; i < size; i ++ {
var _key12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key12 = v
}
    _val13 := NewValue()
    if err := _val13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val13), err)
    }
    p.Props[_key12] = _val13
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Step) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Step"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Step) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("dst", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dst: ", p), err) }
  if err := p.Dst.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dst), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dst: ", p), err) }
  return err
}

func (p *Step) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *Step) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *Step) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ranking", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ranking: ", p), err) }
  if err := oprot.WriteI64(int64(p.Ranking)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ranking (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ranking: ", p), err) }
  return err
}

func (p *Step) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:props: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Props)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Props {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:props: ", p), err) }
  return err
}

func (p *Step) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Step(%+v)", *p)
}

// Attributes:
//  - Src
//  - Steps
type Path struct {
  Src *Vertex `thrift:"src,1" db:"src" json:"src"`
  Steps []*Step `thrift:"steps,2" db:"steps" json:"steps"`
}

func NewPath() *Path {
  return &Path{}
}

var Path_Src_DEFAULT *Vertex
func (p *Path) GetSrc() *Vertex {
  if !p.IsSetSrc() {
    return Path_Src_DEFAULT
  }
return p.Src
}

func (p *Path) GetSteps() []*Step {
  return p.Steps
}
func (p *Path) IsSetSrc() bool {
  return p.Src != nil
}

func (p *Path) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Path)  ReadField1(iprot thrift.Protocol) error {
  p.Src = NewVertex()
  if err := p.Src.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *Path)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Step, 0, size)
  p.Steps =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := NewStep()
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Steps = append(p.Steps, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Path) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Path"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Path) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("src", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := p.Src.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *Path) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("steps", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:steps: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Steps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Steps {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:steps: ", p), err) }
  return err
}

func (p *Path) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Path(%+v)", *p)
}

// Attributes:
//  - Host
//  - Port
type HostAddr struct {
  Host string `thrift:"host,1" db:"host" json:"host"`
  Port Port `thrift:"port,2" db:"port" json:"port"`
}

func NewHostAddr() *HostAddr {
  return &HostAddr{}
}


func (p *HostAddr) GetHost() string {
  return p.Host
}

func (p *HostAddr) GetPort() Port {
  return p.Port
}
func (p *HostAddr) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostAddr)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *HostAddr)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Port(v)
  p.Port = temp
}
  return nil
}

func (p *HostAddr) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HostAddr"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostAddr) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteString(string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *HostAddr) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *HostAddr) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostAddr(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type KeyValue struct {
  Key []byte `thrift:"key,1" db:"key" json:"key"`
  Value []byte `thrift:"value,2" db:"value" json:"value"`
}

func NewKeyValue() *KeyValue {
  return &KeyValue{}
}


func (p *KeyValue) GetKey() []byte {
  return p.Key
}

func (p *KeyValue) GetValue() []byte {
  return p.Value
}
func (p *KeyValue) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KeyValue)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *KeyValue)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *KeyValue) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("KeyValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KeyValue) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *KeyValue) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *KeyValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KeyValue(%+v)", *p)
}

// Attributes:
//  - LogID
//  - TermID
type LogInfo struct {
  LogID LogID `thrift:"log_id,1" db:"log_id" json:"log_id"`
  TermID TermID `thrift:"term_id,2" db:"term_id" json:"term_id"`
}

func NewLogInfo() *LogInfo {
  return &LogInfo{}
}


func (p *LogInfo) GetLogID() LogID {
  return p.LogID
}

func (p *LogInfo) GetTermID() TermID {
  return p.TermID
}
func (p *LogInfo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogInfo)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := LogID(v)
  p.LogID = temp
}
  return nil
}

func (p *LogInfo)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TermID(v)
  p.TermID = temp
}
  return nil
}

func (p *LogInfo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LogInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogInfo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("log_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.LogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.log_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:log_id: ", p), err) }
  return err
}

func (p *LogInfo) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("term_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:term_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.TermID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:term_id: ", p), err) }
  return err
}

func (p *LogInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogInfo(%+v)", *p)
}

// Attributes:
//  - Info
type PartitionBackupInfo struct {
  Info map[PartitionID]*LogInfo `thrift:"info,1" db:"info" json:"info"`
}

func NewPartitionBackupInfo() *PartitionBackupInfo {
  return &PartitionBackupInfo{}
}


func (p *PartitionBackupInfo) GetInfo() map[PartitionID]*LogInfo {
  return p.Info
}
func (p *PartitionBackupInfo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionBackupInfo)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[PartitionID]*LogInfo, size)
  p.Info =  tMap
  for i := 0; i < size; i ++ {
var _key15 PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := PartitionID(v)
    _key15 = temp
}
    _val16 := NewLogInfo()
    if err := _val16.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val16), err)
    }
    p.Info[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PartitionBackupInfo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PartitionBackupInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionBackupInfo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:info: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Info)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Info {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:info: ", p), err) }
  return err
}

func (p *PartitionBackupInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionBackupInfo(%+v)", *p)
}

