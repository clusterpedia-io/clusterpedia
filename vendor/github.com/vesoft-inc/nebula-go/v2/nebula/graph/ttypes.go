// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package graph

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v2/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = nebula0.GoUnusedProtection__
var GoUnusedProtection__ int;

type ErrorCode int64
const (
  ErrorCode_SUCCEEDED ErrorCode = 0
  ErrorCode_E_DISCONNECTED ErrorCode = -1
  ErrorCode_E_FAIL_TO_CONNECT ErrorCode = -2
  ErrorCode_E_RPC_FAILURE ErrorCode = -3
  ErrorCode_E_BAD_USERNAME_PASSWORD ErrorCode = -4
  ErrorCode_E_SESSION_INVALID ErrorCode = -5
  ErrorCode_E_SESSION_TIMEOUT ErrorCode = -6
  ErrorCode_E_SYNTAX_ERROR ErrorCode = -7
  ErrorCode_E_EXECUTION_ERROR ErrorCode = -8
  ErrorCode_E_STATEMENT_EMPTY ErrorCode = -9
  ErrorCode_E_USER_NOT_FOUND ErrorCode = -10
  ErrorCode_E_BAD_PERMISSION ErrorCode = -11
  ErrorCode_E_SEMANTIC_ERROR ErrorCode = -12
  ErrorCode_E_TOO_MANY_CONNECTIONS ErrorCode = -13
  ErrorCode_E_PARTIAL_SUCCEEDED ErrorCode = -14
)

var ErrorCodeToName = map[ErrorCode]string {
  ErrorCode_SUCCEEDED: "SUCCEEDED",
  ErrorCode_E_DISCONNECTED: "E_DISCONNECTED",
  ErrorCode_E_FAIL_TO_CONNECT: "E_FAIL_TO_CONNECT",
  ErrorCode_E_RPC_FAILURE: "E_RPC_FAILURE",
  ErrorCode_E_BAD_USERNAME_PASSWORD: "E_BAD_USERNAME_PASSWORD",
  ErrorCode_E_SESSION_INVALID: "E_SESSION_INVALID",
  ErrorCode_E_SESSION_TIMEOUT: "E_SESSION_TIMEOUT",
  ErrorCode_E_SYNTAX_ERROR: "E_SYNTAX_ERROR",
  ErrorCode_E_EXECUTION_ERROR: "E_EXECUTION_ERROR",
  ErrorCode_E_STATEMENT_EMPTY: "E_STATEMENT_EMPTY",
  ErrorCode_E_USER_NOT_FOUND: "E_USER_NOT_FOUND",
  ErrorCode_E_BAD_PERMISSION: "E_BAD_PERMISSION",
  ErrorCode_E_SEMANTIC_ERROR: "E_SEMANTIC_ERROR",
  ErrorCode_E_TOO_MANY_CONNECTIONS: "E_TOO_MANY_CONNECTIONS",
  ErrorCode_E_PARTIAL_SUCCEEDED: "E_PARTIAL_SUCCEEDED",
}

var ErrorCodeToValue = map[string]ErrorCode {
  "SUCCEEDED": ErrorCode_SUCCEEDED,
  "E_DISCONNECTED": ErrorCode_E_DISCONNECTED,
  "E_FAIL_TO_CONNECT": ErrorCode_E_FAIL_TO_CONNECT,
  "E_RPC_FAILURE": ErrorCode_E_RPC_FAILURE,
  "E_BAD_USERNAME_PASSWORD": ErrorCode_E_BAD_USERNAME_PASSWORD,
  "E_SESSION_INVALID": ErrorCode_E_SESSION_INVALID,
  "E_SESSION_TIMEOUT": ErrorCode_E_SESSION_TIMEOUT,
  "E_SYNTAX_ERROR": ErrorCode_E_SYNTAX_ERROR,
  "E_EXECUTION_ERROR": ErrorCode_E_EXECUTION_ERROR,
  "E_STATEMENT_EMPTY": ErrorCode_E_STATEMENT_EMPTY,
  "E_USER_NOT_FOUND": ErrorCode_E_USER_NOT_FOUND,
  "E_BAD_PERMISSION": ErrorCode_E_BAD_PERMISSION,
  "E_SEMANTIC_ERROR": ErrorCode_E_SEMANTIC_ERROR,
  "E_TOO_MANY_CONNECTIONS": ErrorCode_E_TOO_MANY_CONNECTIONS,
  "E_PARTIAL_SUCCEEDED": ErrorCode_E_PARTIAL_SUCCEEDED,
}

func (p ErrorCode) String() string {
  if v, ok := ErrorCodeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  if v, ok := ErrorCodeToValue[s]; ok {
    return v, nil
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

// Attributes:
//  - Rows
//  - ExecDurationInUs
//  - TotalDurationInUs
//  - OtherStats
type ProfilingStats struct {
  Rows int64 `thrift:"rows,1,required" db:"rows" json:"rows"`
  ExecDurationInUs int64 `thrift:"exec_duration_in_us,2,required" db:"exec_duration_in_us" json:"exec_duration_in_us"`
  TotalDurationInUs int64 `thrift:"total_duration_in_us,3,required" db:"total_duration_in_us" json:"total_duration_in_us"`
  OtherStats map[string][]byte `thrift:"other_stats,4" db:"other_stats" json:"other_stats,omitempty"`
}

func NewProfilingStats() *ProfilingStats {
  return &ProfilingStats{}
}


func (p *ProfilingStats) GetRows() int64 {
  return p.Rows
}

func (p *ProfilingStats) GetExecDurationInUs() int64 {
  return p.ExecDurationInUs
}

func (p *ProfilingStats) GetTotalDurationInUs() int64 {
  return p.TotalDurationInUs
}
var ProfilingStats_OtherStats_DEFAULT map[string][]byte

func (p *ProfilingStats) GetOtherStats() map[string][]byte {
  return p.OtherStats
}
func (p *ProfilingStats) IsSetOtherStats() bool {
  return p.OtherStats != nil
}

func (p *ProfilingStats) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRows bool = false;
  var issetExecDurationInUs bool = false;
  var issetTotalDurationInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetRows = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetExecDurationInUs = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetTotalDurationInUs = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRows{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Rows is not set"));
  }
  if !issetExecDurationInUs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExecDurationInUs is not set"));
  }
  if !issetTotalDurationInUs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalDurationInUs is not set"));
  }
  return nil
}

func (p *ProfilingStats)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Rows = v
}
  return nil
}

func (p *ProfilingStats)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExecDurationInUs = v
}
  return nil
}

func (p *ProfilingStats)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalDurationInUs = v
}
  return nil
}

func (p *ProfilingStats)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.OtherStats =  tMap
  for i := 0; i < size; i ++ {
var _key1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
var _val2 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val2 = v
}
    p.OtherStats[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ProfilingStats) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ProfilingStats"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProfilingStats) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rows: ", p), err) }
  if err := oprot.WriteI64(int64(p.Rows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rows (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rows: ", p), err) }
  return err
}

func (p *ProfilingStats) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("exec_duration_in_us", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:exec_duration_in_us: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecDurationInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exec_duration_in_us (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:exec_duration_in_us: ", p), err) }
  return err
}

func (p *ProfilingStats) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("total_duration_in_us", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_duration_in_us: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalDurationInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_duration_in_us (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_duration_in_us: ", p), err) }
  return err
}

func (p *ProfilingStats) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetOtherStats() {
    if err := oprot.WriteFieldBegin("other_stats", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:other_stats: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.OtherStats)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.OtherStats {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:other_stats: ", p), err) }
  }
  return err
}

func (p *ProfilingStats) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProfilingStats(%+v)", *p)
}

// Attributes:
//  - IsDoBranch
//  - ConditionNodeID
type PlanNodeBranchInfo struct {
  IsDoBranch bool `thrift:"is_do_branch,1,required" db:"is_do_branch" json:"is_do_branch"`
  ConditionNodeID int64 `thrift:"condition_node_id,2,required" db:"condition_node_id" json:"condition_node_id"`
}

func NewPlanNodeBranchInfo() *PlanNodeBranchInfo {
  return &PlanNodeBranchInfo{}
}


func (p *PlanNodeBranchInfo) GetIsDoBranch() bool {
  return p.IsDoBranch
}

func (p *PlanNodeBranchInfo) GetConditionNodeID() int64 {
  return p.ConditionNodeID
}
func (p *PlanNodeBranchInfo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIsDoBranch bool = false;
  var issetConditionNodeID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetIsDoBranch = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetConditionNodeID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIsDoBranch{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsDoBranch is not set"));
  }
  if !issetConditionNodeID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ConditionNodeID is not set"));
  }
  return nil
}

func (p *PlanNodeBranchInfo)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsDoBranch = v
}
  return nil
}

func (p *PlanNodeBranchInfo)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConditionNodeID = v
}
  return nil
}

func (p *PlanNodeBranchInfo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PlanNodeBranchInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlanNodeBranchInfo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("is_do_branch", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_do_branch: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsDoBranch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_do_branch (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_do_branch: ", p), err) }
  return err
}

func (p *PlanNodeBranchInfo) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("condition_node_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:condition_node_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ConditionNodeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.condition_node_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:condition_node_id: ", p), err) }
  return err
}

func (p *PlanNodeBranchInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlanNodeBranchInfo(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type Pair struct {
  Key []byte `thrift:"key,1,required" db:"key" json:"key"`
  Value []byte `thrift:"value,2,required" db:"value" json:"value"`
}

func NewPair() *Pair {
  return &Pair{}
}


func (p *Pair) GetKey() []byte {
  return p.Key
}

func (p *Pair) GetValue() []byte {
  return p.Value
}
func (p *Pair) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetKey = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetValue = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetValue{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *Pair)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *Pair)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *Pair) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Pair"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pair) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *Pair) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *Pair) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pair(%+v)", *p)
}

// Attributes:
//  - Name
//  - Id
//  - OutputVar
//  - Description
//  - Profiles
//  - BranchInfo
//  - Dependencies
type PlanNodeDescription struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  Id int64 `thrift:"id,2,required" db:"id" json:"id"`
  OutputVar []byte `thrift:"output_var,3,required" db:"output_var" json:"output_var"`
  Description []*Pair `thrift:"description,4" db:"description" json:"description,omitempty"`
  Profiles []*ProfilingStats `thrift:"profiles,5" db:"profiles" json:"profiles,omitempty"`
  BranchInfo *PlanNodeBranchInfo `thrift:"branch_info,6" db:"branch_info" json:"branch_info,omitempty"`
  Dependencies []int64 `thrift:"dependencies,7" db:"dependencies" json:"dependencies,omitempty"`
}

func NewPlanNodeDescription() *PlanNodeDescription {
  return &PlanNodeDescription{}
}


func (p *PlanNodeDescription) GetName() []byte {
  return p.Name
}

func (p *PlanNodeDescription) GetId() int64 {
  return p.Id
}

func (p *PlanNodeDescription) GetOutputVar() []byte {
  return p.OutputVar
}
var PlanNodeDescription_Description_DEFAULT []*Pair

func (p *PlanNodeDescription) GetDescription() []*Pair {
  return p.Description
}
var PlanNodeDescription_Profiles_DEFAULT []*ProfilingStats

func (p *PlanNodeDescription) GetProfiles() []*ProfilingStats {
  return p.Profiles
}
var PlanNodeDescription_BranchInfo_DEFAULT *PlanNodeBranchInfo
func (p *PlanNodeDescription) GetBranchInfo() *PlanNodeBranchInfo {
  if !p.IsSetBranchInfo() {
    return PlanNodeDescription_BranchInfo_DEFAULT
  }
return p.BranchInfo
}
var PlanNodeDescription_Dependencies_DEFAULT []int64

func (p *PlanNodeDescription) GetDependencies() []int64 {
  return p.Dependencies
}
func (p *PlanNodeDescription) IsSetDescription() bool {
  return p.Description != nil
}

func (p *PlanNodeDescription) IsSetProfiles() bool {
  return p.Profiles != nil
}

func (p *PlanNodeDescription) IsSetBranchInfo() bool {
  return p.BranchInfo != nil
}

func (p *PlanNodeDescription) IsSetDependencies() bool {
  return p.Dependencies != nil
}

func (p *PlanNodeDescription) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetId bool = false;
  var issetOutputVar bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetId = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetOutputVar = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetId{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Id is not set"));
  }
  if !issetOutputVar{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OutputVar is not set"));
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *PlanNodeDescription)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *PlanNodeDescription)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OutputVar = v
}
  return nil
}

func (p *PlanNodeDescription)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Pair, 0, size)
  p.Description =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := NewPair()
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Description = append(p.Description, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ProfilingStats, 0, size)
  p.Profiles =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := NewProfilingStats()
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Profiles = append(p.Profiles, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField6(iprot thrift.Protocol) error {
  p.BranchInfo = NewPlanNodeBranchInfo()
  if err := p.BranchInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BranchInfo), err)
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Dependencies =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.Dependencies = append(p.Dependencies, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanNodeDescription) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PlanNodeDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlanNodeDescription) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *PlanNodeDescription) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *PlanNodeDescription) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("output_var", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:output_var: ", p), err) }
  if err := oprot.WriteBinary(p.OutputVar); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.output_var (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:output_var: ", p), err) }
  return err
}

func (p *PlanNodeDescription) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Description)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Description {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetProfiles() {
    if err := oprot.WriteFieldBegin("profiles", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:profiles: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Profiles)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Profiles {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:profiles: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetBranchInfo() {
    if err := oprot.WriteFieldBegin("branch_info", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:branch_info: ", p), err) }
    if err := p.BranchInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BranchInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:branch_info: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetDependencies() {
    if err := oprot.WriteFieldBegin("dependencies", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dependencies: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.Dependencies)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Dependencies {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dependencies: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlanNodeDescription(%+v)", *p)
}

// Attributes:
//  - PlanNodeDescs
//  - NodeIndexMap
//  - Format
//  - OptimizeTimeInUs
type PlanDescription struct {
  PlanNodeDescs []*PlanNodeDescription `thrift:"plan_node_descs,1,required" db:"plan_node_descs" json:"plan_node_descs"`
  NodeIndexMap map[int64]int64 `thrift:"node_index_map,2,required" db:"node_index_map" json:"node_index_map"`
  Format []byte `thrift:"format,3,required" db:"format" json:"format"`
  OptimizeTimeInUs int32 `thrift:"optimize_time_in_us,4,required" db:"optimize_time_in_us" json:"optimize_time_in_us"`
}

func NewPlanDescription() *PlanDescription {
  return &PlanDescription{}
}


func (p *PlanDescription) GetPlanNodeDescs() []*PlanNodeDescription {
  return p.PlanNodeDescs
}

func (p *PlanDescription) GetNodeIndexMap() map[int64]int64 {
  return p.NodeIndexMap
}

func (p *PlanDescription) GetFormat() []byte {
  return p.Format
}

func (p *PlanDescription) GetOptimizeTimeInUs() int32 {
  return p.OptimizeTimeInUs
}
func (p *PlanDescription) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPlanNodeDescs bool = false;
  var issetNodeIndexMap bool = false;
  var issetFormat bool = false;
  var issetOptimizeTimeInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetPlanNodeDescs = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNodeIndexMap = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetFormat = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetOptimizeTimeInUs = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPlanNodeDescs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PlanNodeDescs is not set"));
  }
  if !issetNodeIndexMap{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NodeIndexMap is not set"));
  }
  if !issetFormat{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Format is not set"));
  }
  if !issetOptimizeTimeInUs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OptimizeTimeInUs is not set"));
  }
  return nil
}

func (p *PlanDescription)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PlanNodeDescription, 0, size)
  p.PlanNodeDescs =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := NewPlanNodeDescription()
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.PlanNodeDescs = append(p.PlanNodeDescs, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanDescription)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64]int64, size)
  p.NodeIndexMap =  tMap
  for i := 0; i < size; i ++ {
var _key7 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key7 = v
}
var _val8 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val8 = v
}
    p.NodeIndexMap[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PlanDescription)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Format = v
}
  return nil
}

func (p *PlanDescription)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OptimizeTimeInUs = v
}
  return nil
}

func (p *PlanDescription) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PlanDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlanDescription) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("plan_node_descs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:plan_node_descs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PlanNodeDescs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PlanNodeDescs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:plan_node_descs: ", p), err) }
  return err
}

func (p *PlanDescription) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("node_index_map", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:node_index_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.NodeIndexMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.NodeIndexMap {
    if err := oprot.WriteI64(int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:node_index_map: ", p), err) }
  return err
}

func (p *PlanDescription) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("format", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:format: ", p), err) }
  if err := oprot.WriteBinary(p.Format); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.format (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:format: ", p), err) }
  return err
}

func (p *PlanDescription) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optimize_time_in_us", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:optimize_time_in_us: ", p), err) }
  if err := oprot.WriteI32(int32(p.OptimizeTimeInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.optimize_time_in_us (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:optimize_time_in_us: ", p), err) }
  return err
}

func (p *PlanDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlanDescription(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - LatencyInUs
//  - Data
//  - SpaceName
//  - ErrorMsg
//  - PlanDesc
//  - Comment
type ExecutionResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  LatencyInUs int32 `thrift:"latency_in_us,2,required" db:"latency_in_us" json:"latency_in_us"`
  Data *nebula0.DataSet `thrift:"data,3" db:"data" json:"data,omitempty"`
  SpaceName []byte `thrift:"space_name,4" db:"space_name" json:"space_name,omitempty"`
  ErrorMsg []byte `thrift:"error_msg,5" db:"error_msg" json:"error_msg,omitempty"`
  PlanDesc *PlanDescription `thrift:"plan_desc,6" db:"plan_desc" json:"plan_desc,omitempty"`
  Comment []byte `thrift:"comment,7" db:"comment" json:"comment,omitempty"`
}

func NewExecutionResponse() *ExecutionResponse {
  return &ExecutionResponse{}
}


func (p *ExecutionResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *ExecutionResponse) GetLatencyInUs() int32 {
  return p.LatencyInUs
}
var ExecutionResponse_Data_DEFAULT *nebula0.DataSet
func (p *ExecutionResponse) GetData() *nebula0.DataSet {
  if !p.IsSetData() {
    return ExecutionResponse_Data_DEFAULT
  }
return p.Data
}
var ExecutionResponse_SpaceName_DEFAULT []byte

func (p *ExecutionResponse) GetSpaceName() []byte {
  return p.SpaceName
}
var ExecutionResponse_ErrorMsg_DEFAULT []byte

func (p *ExecutionResponse) GetErrorMsg() []byte {
  return p.ErrorMsg
}
var ExecutionResponse_PlanDesc_DEFAULT *PlanDescription
func (p *ExecutionResponse) GetPlanDesc() *PlanDescription {
  if !p.IsSetPlanDesc() {
    return ExecutionResponse_PlanDesc_DEFAULT
  }
return p.PlanDesc
}
var ExecutionResponse_Comment_DEFAULT []byte

func (p *ExecutionResponse) GetComment() []byte {
  return p.Comment
}
func (p *ExecutionResponse) IsSetData() bool {
  return p.Data != nil
}

func (p *ExecutionResponse) IsSetSpaceName() bool {
  return p.SpaceName != nil
}

func (p *ExecutionResponse) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *ExecutionResponse) IsSetPlanDesc() bool {
  return p.PlanDesc != nil
}

func (p *ExecutionResponse) IsSetComment() bool {
  return p.Comment != nil
}

func (p *ExecutionResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetLatencyInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetErrorCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetLatencyInUs = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetLatencyInUs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LatencyInUs is not set"));
  }
  return nil
}

func (p *ExecutionResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *ExecutionResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LatencyInUs = v
}
  return nil
}

func (p *ExecutionResponse)  ReadField3(iprot thrift.Protocol) error {
  p.Data = nebula0.NewDataSet()
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *ExecutionResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *ExecutionResponse)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *ExecutionResponse)  ReadField6(iprot thrift.Protocol) error {
  p.PlanDesc = NewPlanDescription()
  if err := p.PlanDesc.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PlanDesc), err)
  }
  return nil
}

func (p *ExecutionResponse)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Comment = v
}
  return nil
}

func (p *ExecutionResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExecutionResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecutionResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *ExecutionResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("latency_in_us", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latency_in_us: ", p), err) }
  if err := oprot.WriteI32(int32(p.LatencyInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latency_in_us (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latency_in_us: ", p), err) }
  return err
}

func (p *ExecutionResponse) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetSpaceName() {
    if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:space_name: ", p), err) }
    if err := oprot.WriteBinary(p.SpaceName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.space_name (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:space_name: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:error_msg: ", p), err) }
    if err := oprot.WriteBinary(p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:error_msg: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetPlanDesc() {
    if err := oprot.WriteFieldBegin("plan_desc", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:plan_desc: ", p), err) }
    if err := p.PlanDesc.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PlanDesc), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:plan_desc: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin("comment", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:comment: ", p), err) }
    if err := oprot.WriteBinary(p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:comment: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecutionResponse(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - ErrorMsg
//  - SessionID
type AuthResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorMsg []byte `thrift:"error_msg,2" db:"error_msg" json:"error_msg,omitempty"`
  SessionID *int64 `thrift:"session_id,3" db:"session_id" json:"session_id,omitempty"`
}

func NewAuthResponse() *AuthResponse {
  return &AuthResponse{}
}


func (p *AuthResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}
var AuthResponse_ErrorMsg_DEFAULT []byte

func (p *AuthResponse) GetErrorMsg() []byte {
  return p.ErrorMsg
}
var AuthResponse_SessionID_DEFAULT int64
func (p *AuthResponse) GetSessionID() int64 {
  if !p.IsSetSessionID() {
    return AuthResponse_SessionID_DEFAULT
  }
return *p.SessionID
}
func (p *AuthResponse) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *AuthResponse) IsSetSessionID() bool {
  return p.SessionID != nil
}

func (p *AuthResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetErrorCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *AuthResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *AuthResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *AuthResponse)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SessionID = &v
}
  return nil
}

func (p *AuthResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AuthResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *AuthResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_msg: ", p), err) }
    if err := oprot.WriteBinary(p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_msg: ", p), err) }
  }
  return err
}

func (p *AuthResponse) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetSessionID() {
    if err := oprot.WriteFieldBegin("session_id", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:session_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.SessionID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.session_id (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:session_id: ", p), err) }
  }
  return err
}

func (p *AuthResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthResponse(%+v)", *p)
}

